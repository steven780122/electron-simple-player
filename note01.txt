1. BrowserWindow > rederer process (創建窗口)
2. 避免重開>  可安裝nodemon >> npm install nodemon --save-dev (開發用)
3. 此時就可以將package.json >>
  "scripts": {
    "start": "electron ."   >> 改為 "nodemon --watch main.js --exec electron ."   (electron .不需要單引號)
  },

  如此只要main.js有修正就會自動執行(因watch main.js)
4. BrowserWindow的API文件可以看:
https://www.electronjs.org/docs/api/browser-window
5. electron process之間的通訊方式> IPC (interprocess communication)和chromium完全一致
6. 測試通訊:
   如註解

7. 開始撰寫撥放器
8. ... 是ES6的擴展運算符
9. 兩個窗口幾乎用相同代碼 >> 重構!來封裝吧~~ (用ES6 的class)
可參考:https://ithelp.ithome.com.tw/articles/10195477
10. ES6 的 Class 、super 的特例與繼承
https://ithelp.ithome.com.tw/articles/10200658
11. 優雅的顯示窗口, 當頁面在窗口中看到未完成的頁面不是很好的體驗>
https://www.electronjs.org/docs/api/browser-window#%E4%BC%98%E9%9B%85%E5%9C%B0%E6%98%BE%E7%A4%BA%E7%AA%97%E5%8F%A3
採用ready-to-show
也就是改為ready-to-show事件完成後再來顯示窗口就不會閃爍
12. document.getElementById 可以寫個helper改用$取代然後export
13. showOpenDialog
https://www.electronjs.org/docs/api/dialog
(留意  因為promise物件寫法>>  用.then)
14.
path.basename:指返回檔名沒有全路徑!!
15. 數據持久化  (可持續使用)
本sample 利用文件~  使用electron-store!  (預期可以測試，添加完後  關視窗下次還是會有該檔案)
留意:  儲存路徑by 系統不同: (https://medium.com/cameron-nokes/how-to-store-user-data-in-electron-3ba6bf66bc1e)
Where should I store the data?
Typically data is stored in the user’s “app data” folder.
Where this directory is varies by operating system.
Mac OS: ~/Library/Application Support/<Your App Name (taken from the name property in package.json)>
Windows: C:\Users\<you>\AppData\Local\<Your App Name>
Linux: ~/.config/<Your App Name>

16. 想為每一筆創建獨立的id:  可用node第三方uuid >> npm install uuid --save
17. return 'this'  所以就可以用鏈式調用~~  因為有this指標，可參考自建之DataStore之saveTracks()
文章可參考: https://kknews.cc/zh-tw/code/6k6899q.html
18. 渲染初始頁面&選檔案後>  都要重新渲染index
19. boostrap 的 flex (align-items-center, justify-content 等可以方便垂直置中等)
20. 因mainWindow一開始也需要帶出electron-store的列表>>  可參考webContents的事件: 'did-finish-load'
21. icon 可參考 fontawesome
22. HTMLAudio tag & HTMLAudioElement對象
23. HTML 自定義屬性: data-*, JS 可用HTMLElement的dataset屬性讀取
可自行console.log看event內的架構 (若有設定data-*, 可以看到event中的dataset有屬性值!)
24. 若不要HTML原本屬性的功能，可用event.preventDefault()    例如onclick不想要跳轉之類的~
25. ES6 Destructuring Assignment: 解構賦值: 可參考https://ithelp.ithome.com.tw/articles/10185430
26. 重要> event.target等 https://ithelp.ithome.com.tw/articles/10192015
(target 可以取得觸發事件的)
27. classList 可以拿來return class內容
28. 點擊:  (未完成!)
(1) 播放圖: 是否是正在播放之歌曲:  是:繼續播放當前音樂, 否:播放新歌，且同時將其他的音樂圖標的暫停圖示改掉   
(2) 暫停圖: 暫停當前音樂
(3) 刪除圖: 發送事件刪除音樂  (撈取store時取消該id並重新Save)
29. 新增撥圖 (&影片todo)
30. 新增scroll bar: ex, style="height: 500px; overflow: auto"
31. Audio 什麼時候加載好 >> 可參考https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadedmetadata_event
onloadedmetadata
32. 撥放到的時間可以用timeuodate (ontimeupdate)

    
************
打包方式:
1. 我採用 electron-builder 較為方便!
npm install electron-builder --save-dev
(參考https://a091234765.pixnet.net/blog/post/402450719-%5Belectron%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%5Delectron%E5%AE%89%E8%A3%9D%E6%AA%94%E6%89%93%E5%8C%85%E6%94%BB%E7%95%A5%E8%A3%9C%E5%85%85_el)
2. 方式很簡單:   只要在package.json加入
(1). Script 新增內容如以下 
  "scripts": {
    "pack": "electron-builder --dir",
    "dist": "electron-builder"
  },
(2). build在dependencies增加如以下
  "build": {
    "appId": "com.cilent.app.electronbuild",
    "productName": "electron-simple-player",
    "directories": {
      "output": "build"
    },
    "mac": {
      "icon": "icons/Mushroom.ico"
    },
    "win": {
      "icon": "icons/Mushroom.ico"
    },
    "linux": {
      "icon": "icons/Mushroom.ico"
    }
  }

3. ico自行製作

4. 打包語法>> (pack為打包成執行檔,)  
輸入npm run pack
輸入npm run dist  

5. 因robot framework異常 無法連接electron >  這邊測試使用spectron+mocha
專案需放chromedriver
npm install --save-dev spectron
npm i mocha -D
新增test/XXX.js
貼上https://github.com/electron-userland/spectron 的內容
path: electronPath, 修改為build code的檔
package新增 
"scripts": {
  "test": "mocha"
}

(留意spectron, mocha, electron版本關係)

************
測試想法:  (Sunny:用robotframework + customized .py lib)
1. 先測main/renderer觸發   關閉
2. 新增一圖‧ 撥放 , 有跳出圖檔視窗> 關閉移除
3. 新增一聲音 撥放 (圖案要改)  聲音不等於00:00   
4. 測試檔名儲存，新增圖或聲音>   關閉視窗重開>>  看是否檔案還在並能持續開檔
5. 點擊上方官網 可先
6. 設計loading圖觸發
7. 設計返回鈕
8. 
(1) 播放:  是否是正在播放之歌曲:  是:繼續播放當前音樂, 否:播放新歌，且同時將其他的音樂圖標的暫停圖示改掉   (可測試!!)
(2) 補
9. 小巧思分享: icon 採用公司 LOGO
10. demo 前劃好程式流程心智圖~!


******************************
測試期間發生問題&教學
(在win發現會開啟很多command window >> 應為.bat所造成  會嘗試解決)
(1)https://github.com/electron-userland/spectron/tree/984905ca1468330d8b42f7b14eb320b10fdf1389/test
(2)新增chai:
為了方便斷言
(3) 使用webIO: https://webdriver.io/docs/api/element/click.html
(4) 不錯的spectron + mocha教學: https://livebook.manning.com/book/electron-in-action/chapter-13/59
(ES6 出現了 promise，ES7 出現了 async、await)
(5) 測試選黨(electron的dialog) 研究中: https://github.com/electron-userland/spectron/issues/23
後來文章是建議用dialog  但webdriver類的似乎還無法做這麼完善(除非是inpu file)  >>  可以再研究
(6) 測試音樂或圖片如何確定是對的音樂  是思考方向